<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.toughguy.transactionSystem.model.content.po.TransactionMember">
	
	<!-- 检查openId是否注册 -->
	<select id="checkOpenId" parameterType="TransactionMember" resultType="TransactionMember">
		select * from transaction_member 
		where open_id=#{openId}
	</select>
	
	<!-- 检查openId是否为0  解绑后的openId -->
	<select id="checkOpenIdZero" parameterType="SqlGeneralTwoString" resultType="TransactionMember">
		select * from transaction_member 
		where open_id = '0' and
		member_tel=#{arg1} and 
		member_pwd=#{arg2};
	</select>
	
	<!-- 设置openId -->
	<update id="setOpenId" parameterType="TransactionMember" >
		update transaction_member 
		set open_id = #{openId}
		where member_tel = #{memberTel}
		and member_pwd = #{memberPwd}
	</update>
	
	<!-- 检查会员是否存在 -->
	<select id="loginCheck" parameterType="TransactionMember" resultType="TransactionMember">
		select * from transaction_member 
		where 
		open_id = #{openId} and 
		member_tel=#{memberTel} and 
		member_pwd=#{memberPwd};
	</select>
	<select id="checkTelPwd" parameterType="SqlGeneralTwoString" resultType="TransactionMember">
		select * from transaction_member 
		where 
		member_tel=#{arg1} and 
		member_pwd=#{arg2};
	</select>
	
	
	<!-- 更改密码 -->
	<update id="updatePassword" parameterType="SqlGeneralTwoString">
		update transaction_member set member_pwd=#{arg2} 
		where open_id= #{arg1};
	</update>
	
	<!-- 解除绑定 第一步 通过memberid 检测手机号和密码是否正确-->
	<select id="checkPwd" parameterType="TransactionMember" resultType="TransactionMember">
		select * from transaction_member
		where 
		member_id = #{memberId} and
		member_tel = #{memberTel} and
		member_pwd = #{memberPwd}
	</select>
	
	<!-- 解除绑定 第二步 -->
	<update id="updateUserTel" parameterType="TransactionMember">
		update transaction_member 
		set 
		member_tel = #{memberTel},
		member_pwd = #{memberPwd},
		open_id = '0'
		where member_id= #{memberId};
	</update>
	
	
	<!-- 存储基本资料 -->
	<insert id="saveBasicInfo1" parameterType="MemberBasicInfo" useGeneratedKeys="true" keyProperty="memberId">
		insert into 
		transaction_member(open_id,member_tel,member_pwd,member_date,member_name,member_card,member_integral,member_rank,member_online_times)
		values(#{openId},#{memberTel},#{memberPwd},#{memberDate},#{memberName},#{memberCard},#{memberIntegral},1,#{memberOnlineTimes});
	</insert>
	<!-- 根据openId查个人信息 -->
	<select id="openIdFindUser" parameterType="TransactionMember" resultType="TransactionMember">
		select * from transaction_member where open_id=#{openId};
	</select>
	<!-- 根据memberId查个人信息 -->
	<select id="find" parameterType="TransactionMember" resultType="TransactionMember">
		select * from transaction_member where member_id=#{id};
	</select>

	<!-- 查询所有个人用户的基本信息 -->
	<select id="memberInfo" resultType="TransactionMember">
		select 
			m.member_id, 
			m.member_name,
			m.member_card,
			m.member_tel,
			m.member_rank,
			m.member_online_times,
			m.member_date
		from transaction_member m,transaction_enterprise e
		where e.enterprise_audit_status_id != 1 and e.member_id=m.member_id; 
		
		<!-- where 资料不完善 和审核不通过-->
		<!-- limit #{offset} , #{limit} -->

	</select>
	<!-- 查询所有企业用户的基本信息 -->
	<select id="enterpriseInfo" resultType="MemberBasicInfo">
		select 
		member.member_id,
		enterprise.enterprise_name,
		member.member_tel,
		member.member_rank,
		member.member_online_times,
		member.member_date
		from transaction_member member
		join transaction_enterprise enterprise
		on member.member_id = enterprise.member_id
		<!-- where e.enterprise_audit_status_id = 1 and e.member_id=m.member_id; --> 
	</select>
	<!-- 分页 -->
	<select id="enterpriseInfoPage" parameterType="Map" resultType="map">
		select 
		member.member_id,
		enterprise.enterprise_name,
		member.member_tel,
		member.member_rank,
		member.member_online_times,
		member.member_date
		from transaction_member member
		join transaction_enterprise enterprise
		on member.member_id = enterprise.member_id
		limit #{offset}, #{limit}
	</select>
	<select id="getTotalNumEnterPriseInfo" parameterType="Map" resultType="int">
		select count(*) from transaction_member;
	</select>
	
	<!-- 签到接口 -->
	<select id="findOnlineTimes" parameterType="TransactionMember" resultType="TransactionMember">
		select * from transaction_member
		where member_id = #{memberId};
	</select>
	<update id="updateOnlineTimes" parameterType="TransactionMember" >
		update transaction_member 
		set member_online_times=#{memberOnlineTimes},
		 member_online_time = now()
		where member_id= #{memberId};
	</update>
	
	<!-- 积分接口 -->
	<select id="findIntegral" parameterType="TransactionMember" resultType="TransactionMember">
		select * from transaction_member
		where member_id = #{memberId};
	</select>
	<update id="updateIntegral" parameterType="TransactionMember" >
		update transaction_member 
		set member_integral = #{memberIntegral} 
		where member_id = #{memberId};
	</update>
	
	<!-- 查询手机号是否存在 -->
	<select id="findTel" parameterType="SqlGeneralInfo" resultType="TransactionMember">
		select * from transaction_member
		where member_tel=#{info} 
	</select>
	
	<!-- 根据关键字查询 -->
	<select id="findKeyword" parameterType="SqlGeneralInfo" resultType="MemberBasicInfo">
		select 
		member.member_id,
		enterprise.enterprise_name,
		member.member_tel,
		member.member_rank,
		member.member_online_times,
		member.member_date
		from
		transaction_enterprise enterprise
		join transaction_member member
		on member.member_id = enterprise.member_id
		join transaction_enterprise_area area
		on enterprise.enterprise_area_id = area.enterprise_area_id
		join transaction_enterprise_type type
		on enterprise.enterprise_type_id = type.enterprise_type_id
		join transaction_enterprise_trade trade
		on enterprise.enterprise_trade_id= trade.trade_id
		join transaction_enterprise_status enterprise_status
		on enterprise.enterprise_status_id=enterprise_status.enterprise_status_id
		join transaction_enterprise_address address
		on enterprise.enterprise_address_id=address.address_id
		<!-- join transaction_enterprise_audit_status audit_status
		on enterprise.enterprise_audit_status_id=audit_status.audit_status_id -->
		where 
		member.member_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or member.member_tel like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or member.member_card like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_card_type like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_card_id like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_taxpayer like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_certification_unit like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_reg_address like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_reg_money like concat(concat('%', #{keyword, jdbcType=DOUBLE}),'%')
	 or enterprise.enterprise_legal_person_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_legal_person_card like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or trade.trade_type like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or type.enterprise_type like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise_status.enterprise_status like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or area.enterprise_area like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or address.address_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
		limit #{offset}, #{limit}
	</select>
	<select id="getTotalFindKeyword" parameterType="Map" resultType="int">
		select count(*) from 
		transaction_enterprise enterprise
		join transaction_member member
		on member.member_id = enterprise.member_id
		join transaction_enterprise_area area
		on enterprise.enterprise_area_id = area.enterprise_area_id
		join transaction_enterprise_type type
		on enterprise.enterprise_type_id = type.enterprise_type_id
		join transaction_enterprise_trade trade
		on enterprise.enterprise_trade_id= trade.trade_id
		join transaction_enterprise_status enterprise_status
		on enterprise.enterprise_status_id=enterprise_status.enterprise_status_id
		join transaction_enterprise_address address
		on enterprise.enterprise_address_id=address.address_id
		<!-- join transaction_enterprise_audit_status audit_status
		on enterprise.enterprise_audit_status_id=audit_status.audit_status_id -->
		where 
		member.member_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or member.member_tel like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or member.member_card like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_card_type like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_card_id like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_taxpayer like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_certification_unit like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_reg_address like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_reg_money like concat(concat('%', #{keyword, jdbcType=DOUBLE}),'%')
	 or enterprise.enterprise_legal_person_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise.enterprise_legal_person_card like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or trade.trade_type like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or type.enterprise_type like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or enterprise_status.enterprise_status like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or area.enterprise_area like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	 or address.address_name like concat(concat('%', #{keyword, jdbcType=VARCHAR}),'%')
	</select>
	
	
	<!-- 实现检验是否今天可以签到 -->
	<select id="findTodayOnline" parameterType="TransactionMember" resultType="TransactionMember" >
		select * from transaction_member
		where member_id = #{memberId}
		and TO_DAYS(member_online_time) = TO_DAYS(NOW());
	</select>
	
	
</mapper>